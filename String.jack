// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
// projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** Underlying array of character codes */
    field Array data;
    /** Current length of the string */
    field int length;

    /** constructs a new empty string with a maximum length of maxLength */
    constructor String new(int maxLength) {
        let length = 0;                       // initial length
        let data = Array.new(maxLength);      // allocate backing array
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do data.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        do data[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, until a non-digit. */
    method int intValue() {
        var int i, value;
        let i = 0;
        let value = 0;
        while (i < length) {
            // char code for '0' is 48, so subtract to get digit
            let value = value * 10 + (data[i] - 48);
            let i = i + 1;
        }
        return value;
    }

    /** Sets this string to hold a decimal representation of val. */
    method void setInt(int val) {
        var int i, j, digit;
        // clear current contents
        let length = 0;
        let i = 0;
        // build digits in reverse order
        while (val > 0) {
            let digit = val % 10;
            do appendChar(digit + 48);
            let val = val / 10;
        }
        // reverse the characters 0..length-1
        let i = 0;
        let j = length - 1;
        while (i < j) {
            var char tempChar;
            let tempChar     = data[i];
            let data[i]      = data[j];
            let data[j]      = tempChar;
            let i = i + 1;
            let j = j - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return '\n';
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return '\b';
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return '"';
    }
}
